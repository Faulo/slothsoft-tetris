var MOVE_UP = 87;var MOVE_DOWN = 83;var MOVE_LEFT = 65;var MOVE_RIGHT = 68;var MOVE_JUMP = 32;Tetris.Game = function() {	this.dom = {		doc : undefined,		parent : undefined,		frame : undefined,		map : undefined,		fps : undefined	};	this.xslt = new XSLTProcessor();	this.keysPressed = {};	this.drawObjects = [];	this.tickObjects = [];};//variablesTetris.Game.prototype.status = 0;Tetris.Game.prototype.dom = undefined;Tetris.Game.prototype.keysPressed = undefined;Tetris.Game.prototype.xslt = undefined;Tetris.Game.prototype.config = "/getResource.php/tetris/game";Tetris.Game.prototype.template = "/getTemplate.php/tetris/game";Tetris.Game.prototype.fpsTimer = undefined;Tetris.Game.prototype.drawTimer = undefined;Tetris.Game.prototype.drawObjects = undefined;Tetris.Game.prototype.drawCount = 0;Tetris.Game.prototype.drawValid = undefined;Tetris.Game.prototype.tickTimer = undefined;Tetris.Game.prototype.tickObjects = undefined;Tetris.Game.prototype.tickCount = 0;Tetris.Game.prototype.tickValid = undefined;Tetris.Game.prototype.controls = undefined;Tetris.Game.prototype.board = undefined;//methodsTetris.Game.prototype.init = function(parentNode) {	this.dom.doc = parentNode.ownerDocument;	this.dom.parent = parentNode;	this.config = requestDocument(this.config);	this.template = requestDocument(this.template);	this.xslt.importStylesheet(this.template);	this.load();				this.start();};Tetris.Game.prototype.setActive = function() {	this.status = 1;	this.dom.frame.setAttribute("data-game-status", this.status);		this.tickTimer = window.setInterval(function(game) { game.tick(); game.tickCount++;}, 33, this);	//this.drawTimer = window.setInterval(function(game) { game.draw(); game.drawCount++;}, 33, this);		this.fpsTimer = window.setInterval(function(game) { game.dom.fps.value = game.drawCount; game.drawCount = game.tickCount = 0; }, 1000, this);};Tetris.Game.prototype.setInactive = function() {	this.status = 0;	this.dom.frame.setAttribute("data-game-status", this.status);		window.clearInterval(this.tickTimer);	//window.clearInterval(this.drawTimer);	window.clearInterval(this.fpsTimer);};Tetris.Game.prototype.start = function() {	this.board = new Tetris.Board(this, this.dom.map.firstChild);	this.storage = new Tetris.Storage(this, this.dom.map.lastChild);	this.controls = new Tetris.Controls(this, this.storage, this.board);		this.drawBound = this.draw.bind(this);	window.requestAnimationFrame(this.drawBound);};Tetris.Game.prototype.load = function() {	var doc = this.xslt.transformToDocument(this.config);	if (this.dom.frame && this.dom.frame.parentNode) {		this.dom.frame.parentNode.removeChild(this.dom.frame);	}	this.dom.frame = this.dom.doc.adoptNode(doc.documentElement);	this.dom.frame.game = this;	this.dom.frame.setAttribute("data-game-status", this.status);	this.dom.frame.addEventListener("focus", function(eve) { this.game.setActive(); }, false);	this.dom.frame.addEventListener("blur", function(eve) { this.game.setInactive(); }, false);	this.dom.frame.addEventListener(		"keydown",		function(eve) {			this.game.keysPressed[eve.keyCode] = true;		},		false	);	this.dom.frame.addEventListener(		"keyup",		function(eve) {			this.game.keysPressed[eve.keyCode] = false;		},		false	);		this.dom.map = this.dom.frame.getElementsByTagName("div")[0];	this.dom.fps = this.dom.frame.lastChild.firstChild;		this.dom.parent.appendChild(this.dom.frame);};Tetris.Game.prototype.save = function() {};Tetris.Game.prototype.addTickListener = function(listener) {	if (listener.tick) {		this.tickObjects.push(listener);	}};Tetris.Game.prototype.removeTickListener = function(listener) {	var i, j;	for (i = 0, j = this.tickObjects.length; i < j; i++) {		if (this.tickObjects[i] === listener) {			this.tickObjects.splice(i, 1);			this.tickValid = false;			return true;		}	}	return false;};Tetris.Game.prototype.tick = function() {	var i, j;	this.tickValid = true;	for (i = 0, j = this.tickObjects.length; i < j && this.tickValid; i++) {		this.tickObjects[i].tick(this.keysPressed);	}};Tetris.Game.prototype.addDrawListener = function(listener) {	if (listener.draw) {		this.drawObjects.push(listener);	}};Tetris.Game.prototype.removeDrawListener = function(listener) {	var i, j;	for (i = 0, j = this.drawObjects.length; i < j; i++) {		if (this.drawObjects[i] === listener) {			this.drawObjects.splice(i, 1);			this.drawValid = false;			return true;		}	}	return false;};Tetris.Game.prototype.draw = function() {	var i, j;	this.drawCount++;	this.drawValid = true;	for (i = 0, j = this.drawObjects.length; i < j && this.drawValid; i++) {		this.drawObjects[i].draw();	}		window.requestAnimationFrame(this.drawBound);};